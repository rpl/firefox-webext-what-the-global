{"version":3,"sources":["utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["a","fetch","process","then","res","json","data","App","props","searchDebounceTimeout","state","error","search","sorting","column","direction","fetchDataDump","console","log","setState","err","evt","target","value","clearTimeout","setTimeout","className","Grid","Column","Header","as","this","renderMenu","renderTable","Menu","Item","position","Input","icon","placeholder","onChange","handleSearchChanged","Table","sortable","celled","structured","renderTableHeader","renderTableBody","Row","HeaderCell","rowSpan","sorted","undefined","onClick","handleSort","colSpan","keys","Reflect","ownKeys","sort","reverse","Body","flatMap","key","els","entries","idx","filter","item","includes","filepath","jscode","entry","metadata","push","Cell","length","Modal","trigger","Content","Description","style","overflow","toolkit","Icon","color","name","size","browser","mobile","parent","child","slice","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a7ff114.chunk.js","sourcesContent":["interface IMetadata {\n  browser: boolean,\n  toolkit: boolean,\n  mobile: boolean,\n  parent: boolean,\n  child: boolean,\n}\n\ninterface IGlobal {\n  filepath: string,\n  kind: \"const\" | \"var\" | \"let\" | \"function\" | \"globalThisAssignment\",\n  jscode: string,\n  metadata: IMetadata,\n}\n\nexport interface IGlobalsMap {\n  [k: string]: IGlobal[],\n}\n\nexport async function fetchDataDump() {\n  const data = await fetch(\n    `${process.env.PUBLIC_URL}/latest-dump.json`\n  ).then(res => res.json());\n\n  return data as IGlobalsMap;\n}\n","import React from 'react'\nimport { Grid, Header, Icon, Input, Menu, Modal, Table } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n\nimport './App.css';\nimport {\n  fetchDataDump,\n  IGlobalsMap,\n} from './utils';\n\nconst SEARCH_DEBOUNCE_MS = 500;\n\ninterface IProps {}\n\ninterface ITableSorting {\n  direction: \"ascending\" | \"descending\",\n  column: string,\n}\n\ninterface IState {\n  data: IGlobalsMap | null,\n  error: string | null,\n  sorting: ITableSorting,\n  search: string,\n}\n\nclass App extends React.Component<IProps, IState> {\n  private searchDebounceTimeout: any = null\n\n  constructor(props = {}) {\n    super(props);\n    this.state = {\n      data: null,\n      error: null,\n      search: \"\",\n      sorting: {\n        column: \"name\",\n        direction: \"descending\",\n      },\n    };\n  }\n\n  componentDidMount() {\n    fetchDataDump().then(\n      data => {\n        console.log(\"Fetched data:\", data);\n        this.setState({\n          error: null,\n          data,\n        });\n      },\n      err => {\n        console.error(\"Fetch error\", err);\n        this.setState({error: `${err}`});\n      }\n    );\n  }\n\n  handleSort(column: string) {\n    return () => {\n      const {direction} = this.state.sorting;\n      this.setState({\n        sorting: {\n          column,\n          direction: direction === \"ascending\" ? \"descending\" : \"ascending\",\n        },\n      })\n    };\n  }\n\n  handleSearchChanged() {\n    return  (evt: React.ChangeEvent<HTMLInputElement>) => {\n      const search = evt.target.value;\n      clearTimeout(this.searchDebounceTimeout);\n      this.searchDebounceTimeout = setTimeout(() => {\n        this.setState({search});\n      }, SEARCH_DEBOUNCE_MS)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid>\n          <Grid.Column>\n            <Header as='h1'>WTG - What the global!</Header>\n            <p>\n              A list of all the JS global bindings defined in Firefox WebExtension API modules (the ext-*.js files that provides the APIs implementation code),\n              collected by a small JS script using the babel parsing and traverse utilities.\n            </p>\n            <p>\n              Why?\n            </p>\n            <p>\n              All the ext-*.js files are being loaded in a single per-process global, and so it is reasonable to keep a special eye on it.\n            </p>\n            <p>\n              Collisions between global definions coming from different ext-*.js files may lead to errors (e.g. the same binding defined as a var and then as a const)\n              or unexpected behaviors (e.g. a global function silently override another global function with the same name).\n            </p>\n            {this.renderMenu()}\n            {this.renderTable()}\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n\n  renderMenu() {\n    return (\n      <Menu>\n        <Menu.Item>\n\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Input className='icon' icon='search' placeholder='Search...' onChange={this.handleSearchChanged()}/>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n\n  renderTable() {\n    return (\n      <Table sortable celled structured>\n        {this.renderTableHeader()}\n        {this.renderTableBody()}\n      </Table>\n    );\n  }\n\n  renderTableHeader() {\n    const {\n      column,\n      direction,\n    } = this.state.sorting;\n    return (\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell\n            rowSpan=\"2\"\n            sorted={column === \"name\" ? direction : undefined}\n            onClick={this.handleSort('name')}>\n            Name\n          </Table.HeaderCell>\n          <Table.HeaderCell colSpan=\"5\">Where</Table.HeaderCell>\n          <Table.HeaderCell rowSpan=\"2\">JS Code</Table.HeaderCell>\n          <Table.HeaderCell rowSpan=\"2\">Filename</Table.HeaderCell>\n        </Table.Row>\n        <Table.Row>\n          <Table.HeaderCell>Toolkit</Table.HeaderCell>\n          <Table.HeaderCell>Browser</Table.HeaderCell>\n          <Table.HeaderCell>Mobile</Table.HeaderCell>\n          <Table.HeaderCell>Parent</Table.HeaderCell>\n          <Table.HeaderCell>Child</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n    );\n  }\n\n  renderTableBody() {\n    const {data, sorting, search} = this.state;\n    let keys = Reflect.ownKeys(data || {}).sort() as string[];\n\n    if (sorting.column === \"name\" && sorting.direction === \"ascending\") {\n      keys = keys.reverse();\n    }\n\n    return (\n      <Table.Body>\n        {\n          keys.flatMap(key => {\n            const els = [];\n            let entries = (data && data[key]) || [];\n            let idx = 0;\n\n            if (search) {\n              // filtering out element based on search field.\n              entries = entries.filter(item => {\n                if (\n                  !key.includes(search) &&\n                  !item.filepath.includes(search) &&\n                  !item.jscode.includes(search)\n                ) {\n                  return false;\n                }\n                return true;\n              });\n            }\n\n            for (const entry of entries) {\n              const {filepath, jscode, metadata} = entry;\n              els.push(\n                <Table.Row key={key + \"-\" + idx++}>\n                  {\n                    idx === 1 &&\n                    <Table.Cell rowSpan={entries.length}>\n                      <Modal trigger={<span>{key}</span>}>\n                        <Modal.Header>{key}</Modal.Header>\n                        <Modal.Content>\n                          <Modal.Description>\n                            {\n                              entries.flatMap(item => {\n                                return [\n                                  <Header>{item.filepath}</Header>,\n                                  <pre style={{overflow: \"auto\"}}>{item.jscode}</pre>\n                                ];\n                              })\n                            }\n                          </Modal.Description>\n                        </Modal.Content>\n                      </Modal>\n                    </Table.Cell>\n                  }\n                  <Table.Cell>\n                    {metadata.toolkit && <Icon color='green' name='checkmark' size='small' />}\n                  </Table.Cell>\n                  <Table.Cell>\n                    {metadata.browser && <Icon color='green' name='checkmark' size='small' />}\n                  </Table.Cell>\n                  <Table.Cell>\n                    {metadata.mobile && <Icon color='green' name='checkmark' size='small' />}\n                  </Table.Cell>\n                  <Table.Cell>\n                    {metadata.parent && <Icon color='green' name='checkmark' size='small' />}\n                  </Table.Cell>\n                  <Table.Cell>\n                    {metadata.child && <Icon color='green' name='checkmark' size='small' />}\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Modal trigger={<span>{jscode.slice(0, 50)}{jscode.length > 50 ? \"...\" : \"\"}</span>}>\n                      <Modal.Header>{key}</Modal.Header>\n                      <Modal.Content>\n                        <Modal.Description>\n                          <Header>{filepath}</Header>\n                          <pre style={{overflow: \"auto\"}}>{jscode}</pre>\n                        </Modal.Description>\n                      </Modal.Content>\n                    </Modal>\n                  </Table.Cell>\n                  <Table.Cell>{filepath}</Table.Cell>\n                </Table.Row>\n              );\n            }\n            return els;\n          })\n        }\n      </Table.Body>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}